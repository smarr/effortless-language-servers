<project name="som-language-server" default="compile">

	<property name="src.dir"	   location="src"/>
	<property name="lib.dir"	   location="libs" />
	<property name="test.dir"	   location="tests" />
	<property name="somns.dir"	   location="${lib.dir}/SOMns" />
	<property name="som.dir"	   location="${lib.dir}/TruffleSOM" />
	<property name="simple.dir"	   location="${lib.dir}/simple-antlr" />
	<property name="simple.src"	   location="${simple.dir}/src" />
	<property name="bd.dir"		   location="${somns.dir}/libs/black-diamonds" />
	<property name="truffle.dir"   location="${somns.dir}/libs/truffle/truffle" />
	<property name="truffle.build" location="${truffle.dir}/mxbuild/dists" />
	<property name="sdk.build"	   location="${somns.dir}/libs/truffle/sdk/mxbuild/dists" />
	<property name="svm.build"	   location="${somns.dir}/libs/truffle/substratevm/mxbuild/dists" />
	<property name="somns.jar"	   location="${somns.dir}/build/som.jar" />
	<property name="som.jar"	   location="${som.dir}/build/som.jar" />

	<property name="mvn.repo"	   value="https://repo1.maven.org/maven2" />

	<property name="checkstyle.version" value="8.11" />
	<property name="guava.version"	value="19.0" />
	<property name="gson.version"	value="2.8.6" />
	<property name="xtend.version"	value="2.24.0" />
	<property name="antlr.version"	value="4.9.2" />
	<property name="junit.version" value="4.12" />

	<property name="build.dir"	 value="bin"/>

	<path id="jar.classpath">
		<pathelement location="${lib.dir}/gson-${gson.version}.jar" />
		<pathelement location="${lib.dir}/guava-${guava.version}.jar" />
		<pathelement location="${lib.dir}/org.eclipse.xtext.xbase.lib-${xtend.version}.jar" />
		<pathelement location="${lib.dir}/org.eclipse.xtend.lib-${xtend.version}.jar" />
		<pathelement location="${lib.dir}/org.eclipse.xtend.lib.macro-${xtend.version}.jar" />
		<pathelement location="${lib.dir}/antlr4-runtime-${antlr.version}.jar" />

		<pathelement location="${sdk.build}/graal-sdk.jar" />

		<pathelement location="${truffle.build}/truffle-api.jar" />
		<pathelement location="${somns.dir}/libs/somns-deps.jar" />
		<pathelement location="${somns.dir}/libs/affinity.jar" />
		<pathelement location="${somns.dir}/libs/slf4j-api.jar" />
		<pathelement location="${somns.dir}/libs/slf4j-simple.jar" />
		<pathelement location="${somns.dir}/libs/jna-platform.jar" />
		<pathelement location="${somns.dir}/libs/jna.jar" />
		<pathelement location="${bd.dir}/build/black-diamonds.jar" />
	</path>

	<path id="project.classpath">
		<path refid="jar.classpath" />
		<pathelement location="${build.dir}" />
		<pathelement location="${som.jar}" />
		<pathelement location="${somns.jar}" />
		
		<pathelement location="${som.dir}/libs/junit-${junit.version}.jar" />
		<pathelement location="${som.dir}/libs/hamcrest-core-1.3.jar" />
	</path>

	<target name="clean" description="Remove build directories and generated code">
		<delete dir="${build.dir}"/>
	</target>

	<target name="check-somns-available">
		<available file="libs/SOMns/.git" property="somns.present"/>
	</target>

	<target name="somns-submodule" depends="check-somns-available" unless="somns.present">
		<exec executable="git">
			<arg value="submodule" />
			<arg value="update" />
			<arg value="--init" />
			<arg value="--recursive" />
		</exec>
	</target>

	<target name="ideinit" depends="somns-submodule">
		<exec executable="ant" dir="${somns.dir}">
			<arg value="-e" />
			<arg value="ideinit" />
		</exec>
	</target>

	<target name="somns" depends="somns-submodule">
		<exec executable="ant" dir="${somns.dir}">
			<arg value="-e" />
			<arg value="jar" />
		</exec>
		<jar destfile="${bd.dir}/build/black-diamonds.jar" basedir="${bd.dir}/build/classes" />
	</target>

	<target name="trufflesom" depends="somns-submodule">
		<exec executable="ant" dir="${som.dir}">
			<arg value="-e" />
			<arg value="jar"/>
		</exec>
	</target>

	<target name="libs" depends="somns,trufflesom,get-libs">
	</target>

	<target name="get-libs">
		<get src="${mvn.repo}/com/google/code/gson/gson/${gson.version}/gson-${gson.version}.jar"
				usetimestamp="true"
				dest="${lib.dir}/gson-${gson.version}.jar" />
		<get src="${mvn.repo}/com/google/guava/guava/${guava.version}/guava-${guava.version}.jar"
				usetimestamp="true"
				dest="${lib.dir}/guava-${guava.version}.jar" />
		<get src="${mvn.repo}/org/eclipse/xtext/org.eclipse.xtext.xbase.lib/${xtend.version}/org.eclipse.xtext.xbase.lib-${xtend.version}.jar"
				usetimestamp="true"
				dest="${lib.dir}/org.eclipse.xtext.xbase.lib-${xtend.version}.jar" />
		<get src="${mvn.repo}/org/eclipse/xtend/org.eclipse.xtend.lib/${xtend.version}/org.eclipse.xtend.lib-${xtend.version}.jar"
				usetimestamp="true"
				dest="${lib.dir}/org.eclipse.xtend.lib-${xtend.version}.jar" />
		<get src="${mvn.repo}/org/eclipse/xtend/org.eclipse.xtend.lib.macro/${xtend.version}/org.eclipse.xtend.lib.macro-${xtend.version}.jar"
				usetimestamp="true"
				dest="${lib.dir}/org.eclipse.xtend.lib.macro-${xtend.version}.jar" />
		<get src="${mvn.repo}/org/antlr/antlr4-runtime/${antlr.version}/antlr4-runtime-${antlr.version}.jar"
				usetimestamp="true"
				dest="${lib.dir}/antlr4-runtime-${antlr.version}.jar" />
	</target>

	<target name="checkstyle-jar">
		<get src="https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${checkstyle.version}/checkstyle-${checkstyle.version}-all.jar"
				usetimestamp="true"
				dest="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
	</target>

	<target name="checkstyle" depends="checkstyle-jar" description="Check Code with Checkstyle">
		<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpath="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
		<checkstyle config=".checkstyle_checks.xml">
			<fileset dir="src" includes="**/*.java"/>
			<formatter type="plain"/>
		</checkstyle>
	</target>

	<target name="compile" depends="libs,compile-ls" description="Compile">
	</target>

	<target name="compile-ls" description="Compile Language Server">
		<mkdir dir="${build.dir}"/>
		<javac includeantruntime="false" destdir="${build.dir}" debug="true">
			<src path="${src.dir}" />
			<src path="${simple.src}" />
			<src path="${test.dir}" />
			<src path="org.eclipse.lsp4j" />
			<src path="org.eclipse.lsp4j-gen" />
			<src path="org.eclipse.lsp4j.generator" />
			<src path="org.eclipse.lsp4j.jsonrpc" />
			<classpath refid="project.classpath" />
			<compilerarg line="-XDignore.symbol.file" />
			<compilerarg line="-Xlint:all" />
		</javac>
	</target>

	<target name="unit-test" description="Run unit tests">
		<junit>
			<jvmarg line="-ea -esa" />
			<jvmarg value="-Dsom.langserv.som-core-lib=${som.dir}/core-lib" />
			<jvmarg value="-Dsom.langserv.somns-core-lib=${somns.dir}/core-lib" />
			<jvmarg value="-Dpolyglot.engine.WarnInterpreterOnly=false" />

			<classpath refid="project.classpath" />
			<batchtest fork="yes" filtertrace="true" skipNonTests="true" haltonfailure="true" haltonerror="true">
			  <fileset dir="${test.dir}">
				  <include name="**/*.java"/>
			  </fileset>
			</batchtest>
			<formatter type="brief" usefile="false"/>
		</junit>
	</target>

	<target name="jar" depends="compile,compile-jar" description="Package as JAR">
	</target>
	
	<target name="compile-jar">
		<jar destfile="som-language-server.jar" basedir="${build.dir}"></jar>
	</target>

	<target name="deploy" depends="jar,copy-jars" description="Deploy Language Server files to client">
	</target>

	<target name="copy-jars">
		<mkdir dir="../out/server"/>
		<copy todir="../out/server" flatten="true">
			<path>
				<pathelement path="som-language-server.jar"/>
				<path refid="jar.classpath" />
			</path>
		</copy>

		<!-- since the som.jar files have the same name, we copy them separately -->
		<copy file="${som.jar}" tofile="../out/server/som.jar" />
		<copy file="${somns.jar}" tofile="../out/server/somns.jar" />

		<!-- copy the core libs -->
		<copy todir="../out/server/somns-core-lib">
			<fileset dir="${somns.dir}/core-lib"/>
		</copy>
		<copy todir="../out/server/som-core-lib">
			<fileset dir="${som.dir}/core-lib"/>
		</copy>
	</target>
</project>
